Servlet的使用过程
1Web Client 向Servlet容器（Tomcat）发出Http请求
2、Servlet容器接收Web Client的请求
3、Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中
4、Servlet容器创建一个HttpResponse对象
5、Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数
     传给 HttpServlet对象
6、HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息
7、HttpServlet调用HttpResponse对象的有关方法，生成响应数据
8、Servlet容器把HttpServlet的响应结果传给Web Client

二、servlet的生命周期
Servlet生命周期分为三个阶段
　　（1）初始化阶段：调用init()方法
　　（2）响应客户请求阶段：调用service()方法
　　（3）终止阶段：调用destroy()方法
1.初始化阶段
Servlet容器启动时读取web.xml配置文件中的信息，构造指定的Servlet对象，创建ServletConfig对象，同时将ServletConfig对象作为参数来调用Servlet对象的init方法。
2.响应请求阶段 
在Servlet容器启动后：客户首次向Servlet发出请求，Servlet容器会判断内存中是否存在指定的Servlet对象，如果没有则创建它，然后根据客户的请求创建HttpRequest、HttpResponse对象，从而调用Servlet对象的service方法。
3.终止阶段
当WEB应用被终止，或Servlet容器终止运行，或Servlet容器重新装载Servlet新实例时，Servlet容器会先调用Servlet的destroy()方法，在destroy()方法中可以释放掉Servlet所占用的资源。

init（）方法只能被执行一次，而service（）方法可以多次调用。

servlet运行在容器中，如tomcat等（tomcat是web服务器），必须按照容器定义servlet如何由容器管理，如webxml、目录位置等；
Servlet运行在Servlet容器中，其生命周期由容器来管理。Servlet的生命周期通过javax.servlet.Servlet接口中的init()、service()和destroy()方法来表示。
Servlet的生命周期包含了下面4个阶段： 
1）加载和实例化：
Servlet容器负责加载和实例化Servlet。当Servlet容器启动时，或者在容器检测到需要这个Servlet来响应第一个请求时，
创建Servlet实例。当Servlet容器启动后，它必须要知道所需的Servlet类在什么位置，
Servlet容器可以从本地文件系统、远程文件系统或者其他的网络服务中通过类加载器加载Servlet类，成功加载后，
容器创建Servlet的实例。
因为容器是通过Java的反射API来创建Servlet实例，调用的是Servlet的默认构造方法（即不带参数的构造方法），
所以我们在编写Servlet类的时候，不应该提供带参数的构造方法。
初始化 :在Servlet实例化之后，容器将调用Servlet的init()方法初始化这个对象。
初始化的目的是为了让Servlet对象在处理客户端请求前完成一些初始化的工作，如建立数据库的连接，获取配置信息等。
对于每一个Servlet实例，init()方法只被调用一次。
在初始化期间，Servlet实例可以使用容器为它准备的ServletConfig对象从Web应用程序的配置信息（在web.xml中配置）中获取初始化的参数信息。
这样servlet的实例就可以把与容器相关的配置数据保存起来供以后使用，在初始化期间，如果发生错误，Servlet实例可以抛出ServletException异常，一旦抛出该异常，servlet就不再执行，
而随后对它的调用会导致容器对它重新载入并再次运行此方法。 
请求处理 :Servlet容器调用Servlet的service()方法对请求进行处理。
要注意的是，在service()方法调用之前，init()方法必须成功执行。
在service()方法中，通过ServletRequest对象得到客户端的相关信息和请求信息，在对请求进行处理后，
调用ServletResponse对象的方法设置响应信息;当请求到来时，service()方法决定请求的类型（GET、POST、HEAD、OPTIONS、DELETE、PUT、TRACE），
并把请求分发给相应的处理方法（doGet()、doPost()、doHead()、doOptions()、doDelete()、doPut()、doTrace()）每个do方法具有和第一个service()相同的形式。
我们常用的就是doGet()和doPost()方法，为了响应特定类型的HTTP请求，我们必须重载相应的do方法。如果Servlet收到一个HTTP请求而你没有重载相应的do方法，它就返回一个说明此方法对本资源不可用的标准HTTP错误。 
服务终止 :当容器检测到一个Servlet实例应该从服务中被移除的时候，容器就会调用实例的destroy()方法，以便让该实例可以释放它所使用的资源，保存数据到持久存储设备中。当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法。
在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。如果再次需要这个Servlet处理请求，Servlet容器会创建一个新的Servlet实例。 在整个Servlet的生命周期过程中，创建Servlet实例、调用实例的init()和destroy()方法都只进行一次，
当初始化完成后，Servlet容器会将该实例保存在内存中，通过调用它的service()方法，为接收到的请求服务。


实际过程中我们编写的Servlet类都继承于HttpServlet
什么情况下需要序列化 
a）当你想把的内存中的对象写入到硬盘的时候；
b）当你想用套接字在网络上传送对象的时候；
c）当你想通过RMI传输对象的时候；
再稍微解释一下:a)比如说你的内存不够用了，那计算机就要将内存里面的一部分对象暂时的保存到硬盘中，等到要用的时候再读入到内存中，硬盘的那部分存储空间就是所谓的虚拟内存。在比如过你要将某个特定的对象保存到文件中，我隔几天在把它拿出来用，那么这时候就要实现Serializable接口；
b)在进行java的Socket编程的时候，你有时候可能要传输某一类的对象，那么也就要实现Serializable接口；最常见的你传输一个字符串，它是JDK里面的类，也实现了Serializable接口，所以可以在网络上传输。
c)如果要通过远程的方法调用（RMI）去调用一个远程对象的方法，如在计算机A中调用另一台计算机B的对象的方法，那么你需要通过JNDI服务获取计算机B目标对象的引用，将对象从B传送到A，就需要实现序列化接口。
没有人说的话能全部准确，批判性的参考。

invalidate()的调用是把之前的旧的view从主UI线程队列中pop掉。 

这是JAVA-API定义的一组连接数据库的接口,完整的代码应该是:
Class.forName(JDBC驱动名);//将JDBC驱动装进JAVA虚拟机中.
Connection conn = DriverManager.getConnection(URL,数据库登录名,数据库登录密码);//获得数据库连接
Statement statement = con.createStatement(); //访问数据库
ResultSet resultSet = statement.executeQuery(sql);//执行SQL语句
Iterator是迭代器，map之前应该定义过表示map中的键值对都是String类型的。
map.entrySet()是把HashMap类型的数据转换成集合类型
map.entrySet().iterator()是去获得这个集合的迭代器，保存在iter里面。。迭代器这么用：
while(iter.hasNext()) {
  Entry obj = it.next();//就能获得map中的每一个键值对了
}

